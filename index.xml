<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael Pilosov | Academic Website on Michael Pilosov | Academic Website</title>
    <link>https://www.michaelpilosov.com/</link>
    <description>Recent content in Michael Pilosov | Academic Website on Michael Pilosov | Academic Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Michael Pilosov</copyright>
    <lastBuildDate>Mon, 01 Jan 2018 00:00:00 -0700</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Overview</title>
      <link>https://www.michaelpilosov.com/wid/experience/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.michaelpilosov.com/wid/experience/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://www.michaelpilosov.com/wid/resources/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 -0600</pubDate>
      
      <guid>https://www.michaelpilosov.com/wid/resources/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Recent Galleries</title>
      <link>https://www.michaelpilosov.com/wid/posts/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 -0600</pubDate>
      
      <guid>https://www.michaelpilosov.com/wid/posts/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Binder</title>
      <link>https://www.michaelpilosov.com/openscience/binder/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.michaelpilosov.com/openscience/binder/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://www.michaelpilosov.com/openscience/docker/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.michaelpilosov.com/openscience/docker/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;From the &lt;a href=&#34;https://docs.docker.com/get-started/&#34; target=&#34;_blank&#34;&gt;Docker Documentation&lt;/a&gt;:&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers. &amp;gt; The use of Linux containers to deploy applications is called containerization. Containers are not new, but their use for easily deploying applications is.&lt;/p&gt;

&lt;p&gt;Containerization is increasingly popular because containers are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flexible: Even the most complex applications can be containerized.&lt;/li&gt;
&lt;li&gt;Lightweight: Containers leverage and share the host kernel.&lt;/li&gt;
&lt;li&gt;Interchangeable: You can deploy updates and upgrades on-the-fly.&lt;/li&gt;
&lt;li&gt;Portable: You can build locally, deploy to the cloud, and run anywhere.&lt;/li&gt;
&lt;li&gt;Scalable: You can increase and automatically distribute container replicas.&lt;/li&gt;
&lt;li&gt;Stackable: You can stack services vertically and on-the-fly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;images&#34;&gt;Images&lt;/h2&gt;

&lt;p&gt;An image is a collection of files (a package) that is executable.
It has &lt;strong&gt;all the files&lt;/strong&gt; necessary to run an application, from dependencies to configuration files.&lt;/p&gt;

&lt;p&gt;It is analogous to a &lt;code&gt;class&lt;/code&gt; from object-oriented programming.&lt;/p&gt;

&lt;h2 id=&#34;containers&#34;&gt;Containers&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;A &lt;strong&gt;container&lt;/strong&gt; is a runtime instance of an image,&amp;rdquo; or in other words, it is an instance of a class.
One image can be used to &amp;ldquo;spin up&amp;rdquo; many containers.
A container is what an image becomes (in the computer&amp;rsquo;s memory) when it is launched.
It is a user process with a state and need for access to resources.&lt;/p&gt;

&lt;p&gt;Docker being a &amp;ldquo;machine&amp;rdquo; of sorts, it has its own processes, which happen to be instances of images&amp;ndash;containers.&lt;/p&gt;

&lt;p&gt;Just as you would in Linux, you can see a list of your running containers by issuing &lt;code&gt;(sudo) docker ps&lt;/code&gt; (more on that soon).&lt;/p&gt;

&lt;h3 id=&#34;comparison-to-virtual-machines&#34;&gt;Comparison to Virtual Machines&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A container runs natively on Linux and shares the kernel of the host machine with other containers. It runs a discrete process, taking no more memory than any other executable, making it lightweight.&lt;/p&gt;

&lt;p&gt;By contrast, a virtual machine (VM) runs a full-blown “guest” operating system with virtual access to host resources through a hypervisor. In general, VMs provide an environment with more resources than most applications need.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a Virtual Machine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.docker.com/images/VM%402x.png&#34; alt=&#34;container-vm-comparison&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And here is a Container:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.docker.com/images/Container%402x.png&#34; alt=&#34;container-vm-comparison&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how Docker sits atop the Host Operating System &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:os-footnote&#34;&gt;&lt;a href=&#34;#fn:os-footnote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and is performing the management role of resources among applications in place of a &amp;ldquo;hypervisor&amp;rdquo; from a Virtual Machine.&lt;/p&gt;

&lt;h2 id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;

&lt;p&gt;Here is the &lt;a href=&#34;https://github.com/wsargent/docker-cheat-sheet&#34; target=&#34;_blank&#34;&gt;Cheatsheet&lt;/a&gt; from which I will be pulling much of what is in this post.&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;

&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;

&lt;p&gt;Quick and easy install script provided by Docker:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sSL https://get.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;From the author of the cheatsheet:&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re not willing to run a random shell script, please see the &lt;a href=&#34;https://docs.docker.com/engine/installation/linux/&#34; target=&#34;_blank&#34;&gt;installation&lt;/a&gt; instructions for your distribution.
If you are a complete Docker newbie, you should follow the &lt;a href=&#34;https://docs.docker.com/engine/getstarted/&#34; target=&#34;_blank&#34;&gt;series of tutorials&lt;/a&gt; now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;macos&#34;&gt;macOS&lt;/h2&gt;

&lt;p&gt;Download and install &lt;a href=&#34;https://www.docker.com/community-edition&#34; target=&#34;_blank&#34;&gt;Docker Community Edition&lt;/a&gt;. if you have Homebrew-Cask, just type &lt;code&gt;brew cask install docker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve installed Docker Community Edition, click the docker icon in Launchpad. Then start up a container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; You may have to restart your shell session (either by closing and re-launching a new one, or logging out of your remote server connection with &lt;code&gt;Ctrl-D&lt;/code&gt; and logging back in with &lt;code&gt;ssh&lt;/code&gt;). This is what I had to do.&lt;/p&gt;

&lt;p&gt;If successful, you should see a &amp;ldquo;Hello from Docker!&amp;rdquo; printout in your console.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And that&amp;rsquo;s it, you have a running Docker container (this one comes with the install).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, we are not quite done yet. Let&amp;rsquo;s get to some configuration&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/docker-for-windows/install/&#34; target=&#34;_blank&#34;&gt;Go deal with it yourself&lt;/a&gt;. It&amp;rsquo;s similar to the Desktop-version available for Mac, but comes with &lt;strong&gt;all sorts of caveats you should read through first.&lt;/strong&gt;
It should be fairly straightforward for Windows 10 Users.
My suggestion is to simply go with Linux, since our focus is on using Docker for deploying to servers, which are unlikely to be running Windows for the use-cases we have in mind. That said, &lt;em&gt;should be doable, if you insist on it.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;configure&#34;&gt;Configure&lt;/h1&gt;

&lt;p&gt;One thing you may notice is that &lt;code&gt;docker&lt;/code&gt; commands require the use of &lt;code&gt;sudo&lt;/code&gt;, which we would like to avoid.
To avoid permission errors (and the use of sudo), add your user to the &lt;code&gt;docker&lt;/code&gt; group.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/install/linux/linux-postinstall/&#34; target=&#34;_blank&#34;&gt;Post-Installation Steps&lt;/a&gt; contains optional procedures for configuring Linux hosts to work better with Docker. &lt;em&gt;The following is taken from that source, and much more &lt;strong&gt;Troubleshooting Information can be found there&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;sudo-permissions&#34;&gt;Sudo permissions&lt;/h2&gt;

&lt;p&gt;To create the docker group and add your user:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the docker group.&lt;/li&gt;
&lt;li&gt;Add your user to the docker group.&lt;/li&gt;
&lt;li&gt;Log out and log back in so that your group membership is re-evaluated. Some caveats may apply. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:usergroup-caveats&#34;&gt;&lt;a href=&#34;#fn:usergroup-caveats&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo groupadd docker
sudo usermod -aG docker $USER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify that you can run docker commands without sudo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you initially ran Docker CLI commands using sudo before adding your user to the docker group, you may see the following error, which indicates that your &lt;code&gt;~/.docker/&lt;/code&gt; directory was created with incorrect permissions due to the sudo commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;WARNING: Error loading config file: /home/user/.docker/config.json 
- stat /home/user/.docker/config.json: permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix this problem, either remove the &lt;code&gt;~/.docker/ directory&lt;/code&gt; (it is recreated automatically, but any custom settings are lost), or change its ownership and permissions using the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chown &amp;quot;$USER&amp;quot;:&amp;quot;$USER&amp;quot; /home/&amp;quot;$USER&amp;quot;/.docker -R
sudo chmod g+rwx &amp;quot;$HOME/.docker&amp;quot; -R
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;start-on-boot&#34;&gt;Start on boot&lt;/h2&gt;

&lt;p&gt;Sometimes you want Docker to be the main thing running on a server and thus started up on boot (for the occasional restart).
This feature may be desired for servers that host critical processes using Docker.
Most current Linux distributions (RHEL, CentOS, Fedora, Ubuntu 16.04 and higher) use &lt;code&gt;systemd&lt;/code&gt; to manage which services start when the system boots. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:linux-version&#34;&gt;&lt;a href=&#34;#fn:linux-version&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To disable this behavior, use &lt;code&gt;disable&lt;/code&gt; instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl disable docker
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;re-route-ip&#34;&gt;Re-route IP&lt;/h2&gt;

&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;p&gt;By default, the Docker daemon listens for connections on a UNIX socket to accept requests from local clients.&lt;/p&gt;

&lt;p&gt;It is possible to allow Docker to accept requests from remote hosts by configuring it to listen on an IP address and port as well as the UNIX socket.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;For more detailed information on this configuration option take a look at “Bind Docker to another host/port or a unix socket” section of the &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/dockerd/&#34; target=&#34;_blank&#34;&gt;Docker CLI Reference article&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Security Notice&lt;/strong&gt;: Before configuring Docker to accept connections from remote hosts it is critically important that you understand the security implications of opening docker to the network. If steps are not taken to secure the connection, it is possible for remote non-root users to gain root access on the host. For more information on how to use TLS certificates to secure this connection, check this article on how to protect the Docker daemon socket.&lt;/p&gt;

&lt;/div&gt;


&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;p&gt;Configuring Docker to accept remote connections can be done with the &lt;code&gt;docker.service&lt;/code&gt; &lt;code&gt;systemd&lt;/code&gt; unit file for Linux distributions using &lt;code&gt;systemd&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Use the command &lt;code&gt;sudo systemctl edit docker.service&lt;/code&gt; to open an override file for &lt;code&gt;docker.service&lt;/code&gt; in a text editor.&lt;/p&gt;

&lt;p&gt;Add or modify the following lines, &lt;em&gt;substituting your own values.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Service]
ExecStart=
ExecStart=/usr/bin/dockerd -H fd:// -H tcp://127.0.0.1:2375
Save the file.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reload the systemctl configuration and restart Docker.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl daemon-reload
sudo systemctl restart docker.service
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Check to see whether the change was honored by reviewing the output of &lt;code&gt;netstat&lt;/code&gt; to confirm &lt;code&gt;dockerd&lt;/code&gt; is listening on the configured port, which should look similar to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo netstat -lntp | grep dockerd
tcp        0      0 127.0.0.1:2375          0.0.0.0:*               LISTEN      3758/dockerd
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;To enable IPv6 on the Docker daemon, see &lt;a href=&#34;https://docs.docker.com/config/daemon/ipv6/&#34; target=&#34;_blank&#34;&gt;Enable IPv6 support&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;More troubleshooting information can be found in the &lt;a href=&#34;https://docs.docker.com/install/linux/linux-postinstall/#troubleshooting&#34; target=&#34;_blank&#34;&gt;Troubleshooting section&lt;/a&gt; of the &lt;a href=&#34;https://docs.docker.com/install/linux/linux-postinstall/&#34; target=&#34;_blank&#34;&gt;Post-Install&lt;/a&gt; documentation page.&lt;/p&gt;

&lt;p&gt;Here we attempt to address just a couple of the most common things that we may have to do.&lt;/p&gt;

&lt;h3 id=&#34;ip-forwarding&#34;&gt;IP Forwarding&lt;/h3&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;If you manually configure your network using &lt;code&gt;systemd-network&lt;/code&gt; with &lt;code&gt;systemd&lt;/code&gt; &lt;strong&gt;version 219 or higher,&lt;/strong&gt; &lt;em&gt;Docker containers may not be able to access your network.&lt;/em&gt;&lt;/p&gt;

&lt;/div&gt;


&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;p&gt;Beginning with &lt;code&gt;systemd&lt;/code&gt; &lt;strong&gt;version 220&lt;/strong&gt;, the forwarding setting for a given network (&lt;code&gt;net.ipv4.conf.&amp;lt;interface&amp;gt;.forwarding&lt;/code&gt;) defaults to &lt;code&gt;off&lt;/code&gt;.
This setting prevents IP forwarding.
It also conflicts with Docker’s behavior of enabling the &lt;code&gt;net.ipv4.conf.all.forwarding&lt;/code&gt; setting within containers.&lt;/p&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;To work around this on RHEL, CentOS, or Fedora, edit the &lt;code&gt;&amp;lt;interface&amp;gt;.network&lt;/code&gt; file in &lt;code&gt;/usr/lib/systemd/network/&lt;/code&gt; on your Docker host (ex: &lt;code&gt;/usr/lib/systemd/network/80-container-host0.network&lt;/code&gt;) and add the following block within the &lt;code&gt;[Network]&lt;/code&gt; section.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Network]
...
IPForward=kernel
# OR
IPForward=true
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;This configuration allows IP forwarding from the container as expected.&lt;/p&gt;

&lt;h3 id=&#34;limiting&#34;&gt;Limiting&lt;/h3&gt;

&lt;p&gt;You may see&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;WARNING: Your kernel does not support swap limit capabilities. Limitation discarded.
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;This warning does not occur on RPM-based systems, which enable these capabilities by default.
If you don’t need these capabilities, you can ignore the warning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can enable these capabilities on Ubuntu or Debian by following these instructions.
Memory and swap accounting incur an overhead of about 1% of the total available memory and a 10% overall performance degradation, even if Docker is not running.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log into the Ubuntu or Debian host as a user with sudo privileges.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Edit the &lt;code&gt;/etc/default/grub&lt;/code&gt; file. Add or edit the &lt;code&gt;GRUB_CMDLINE_LINUX&lt;/code&gt; line to add the following two key-value pairs:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;GRUB_CMDLINE_LINUX=&amp;quot;cgroup_enable=memory swapaccount=1&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Save and close the file.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update GRUB.
&lt;code&gt;sudo update-grub&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If your GRUB configuration file has incorrect syntax, an error occurs. In this case, repeat steps 3 and 4.
 The changes take effect when the system is rebooted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;cheat-sheet&#34;&gt;Cheat Sheet&lt;/h1&gt;

&lt;p&gt;The following is full &lt;a href=&#34;https://github.com/wsargent/docker-cheat-sheet&#34; target=&#34;_blank&#34;&gt;Cheat Sheet&lt;/a&gt; mentioned earlier, and presented here for convenience. Feel free to use the table of contents on the right sidebar (or duplicated below for mobile users) to more easily navigate this page than on the Github Gist &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gist&#34;&gt;&lt;a href=&#34;#fn:gist&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;images-1&#34;&gt;Images&lt;/h2&gt;

&lt;p&gt;Images are just &lt;a href=&#34;https://docs.docker.com/engine/understanding-docker/#how-does-a-docker-image-work&#34; target=&#34;_blank&#34;&gt;templates for docker containers&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;lifecycle&#34;&gt;Lifecycle&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/images&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker images&lt;/code&gt;&lt;/a&gt; shows all images.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/import&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker import&lt;/code&gt;&lt;/a&gt; creates an image from a tarball.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker build&lt;/code&gt;&lt;/a&gt; creates image from Dockerfile.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/commit&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker commit&lt;/code&gt;&lt;/a&gt; creates image from a container, pausing it temporarily if it is running.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/rmi&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker rmi&lt;/code&gt;&lt;/a&gt; removes an image.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/load&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker load&lt;/code&gt;&lt;/a&gt; loads an image from a tar archive as STDIN, including images and tags (as of 0.7).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/save&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker save&lt;/code&gt;&lt;/a&gt; saves an image to a tar archive stream to STDOUT with all parent layers, tags &amp;amp; versions (as of 0.7).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;info&#34;&gt;Info&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/history&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker history&lt;/code&gt;&lt;/a&gt; shows history of image.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/tag&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker tag&lt;/code&gt;&lt;/a&gt; tags an image to a name (local or registry).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;containers-1&#34;&gt;Containers&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://etherealmind.com/basics-docker-containers-hypervisors-coreos/&#34; target=&#34;_blank&#34;&gt;Your basic isolated Docker process&lt;/a&gt;. Containers are to Virtual Machines as threads are to processes. Or you can think of them as chroots on steroids.&lt;/p&gt;

&lt;h3 id=&#34;lifecycle-1&#34;&gt;Lifecycle&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/create&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker create&lt;/code&gt;&lt;/a&gt; creates a container but does not start it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/rename/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker rename&lt;/code&gt;&lt;/a&gt; allows the container to be renamed.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/run&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker run&lt;/code&gt;&lt;/a&gt; creates and starts a container in one operation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/rm&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker rm&lt;/code&gt;&lt;/a&gt; deletes a container.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/update/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker update&lt;/code&gt;&lt;/a&gt; updates a container&amp;rsquo;s resource limits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Normally if you run a container without options it will start and stop immediately, if you want keep it running you can use the command, &lt;code&gt;docker run -td container_id&lt;/code&gt; this will use the option &lt;code&gt;-t&lt;/code&gt; that will allocate a pseudo-TTY session and &lt;code&gt;-d&lt;/code&gt; that will detach automatically the container (run container in background and print container ID).&lt;/p&gt;

&lt;p&gt;If you want a transient container, &lt;code&gt;docker run --rm&lt;/code&gt; will remove the container after it stops.&lt;/p&gt;

&lt;p&gt;If you want to map a directory on the host to a docker container, &lt;code&gt;docker run -v $HOSTDIR:$DOCKERDIR&lt;/code&gt;. Also see &lt;a href=&#34;https://github.com/wsargent/docker-cheat-sheet/#volumes&#34; target=&#34;_blank&#34;&gt;Volumes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to remove also the volumes associated with the container, the deletion of the container must include the &lt;code&gt;-v&lt;/code&gt; switch like in &lt;code&gt;docker rm -v&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a &lt;a href=&#34;https://docs.docker.com/engine/admin/logging/overview/&#34; target=&#34;_blank&#34;&gt;logging driver&lt;/a&gt; available for individual containers in docker 1.10. To run docker with a custom log driver (i.e., to syslog), use &lt;code&gt;docker run --log-driver=syslog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another useful option is &lt;code&gt;docker run --name yourname docker_image&lt;/code&gt; because when you specify the &lt;code&gt;--name&lt;/code&gt; inside the run command this will allow you to start and stop a container by calling it with the name the you specified when you created it.&lt;/p&gt;

&lt;h3 id=&#34;starting-and-stopping&#34;&gt;Starting and Stopping&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/start&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker start&lt;/code&gt;&lt;/a&gt; starts a container so it is running.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/stop&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker stop&lt;/code&gt;&lt;/a&gt; stops a running container.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/restart&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker restart&lt;/code&gt;&lt;/a&gt; stops and starts a container.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/pause/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker pause&lt;/code&gt;&lt;/a&gt; pauses a running container, &amp;ldquo;freezing&amp;rdquo; it in place.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/unpause/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker unpause&lt;/code&gt;&lt;/a&gt; will unpause a running container.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/wait&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker wait&lt;/code&gt;&lt;/a&gt; blocks until running container stops.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/kill&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker kill&lt;/code&gt;&lt;/a&gt; sends a SIGKILL to a running container.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/attach&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker attach&lt;/code&gt;&lt;/a&gt; will connect to a running container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to integrate a container with a &lt;a href=&#34;https://docs.docker.com/engine/admin/host_integration/&#34; target=&#34;_blank&#34;&gt;host process manager&lt;/a&gt;, start the daemon with &lt;code&gt;-r=false&lt;/code&gt; then use &lt;code&gt;docker start -a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to expose container ports through the host, see the &lt;a href=&#34;#exposing-ports&#34;&gt;exposing ports&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;Restart policies on crashed docker instances are &lt;a href=&#34;http://container42.com/2014/09/30/docker-restart-policies/&#34; target=&#34;_blank&#34;&gt;covered here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;cpu-constraints&#34;&gt;CPU Constraints&lt;/h4&gt;

&lt;p&gt;You can limit CPU, either using a percentage of all CPUs, or by using specific cores.&lt;/p&gt;

&lt;p&gt;For example, you can tell the &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#/cpu-share-constraint&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;cpu-shares&lt;/code&gt;&lt;/a&gt; setting.  The setting is a bit strange &amp;ndash; 1024 means 100% of the CPU, so if you want the container to take 50% of all CPU cores, you should specify 512.  See &lt;a href=&#34;https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/#_cpu&#34; target=&#34;_blank&#34;&gt;https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/#_cpu&lt;/a&gt; for more:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -ti -c 512 agileek/cpuset-test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also only use some CPU cores using &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#/cpuset-constraint&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;cpuset-cpus&lt;/code&gt;&lt;/a&gt;.  See &lt;a href=&#34;https://agileek.github.io/docker/2014/08/06/docker-cpuset/&#34; target=&#34;_blank&#34;&gt;https://agileek.github.io/docker/2014/08/06/docker-cpuset/&lt;/a&gt; for details and some nice videos:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -ti --cpuset-cpus=0,4,6 agileek/cpuset-test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that Docker can still &lt;strong&gt;see&lt;/strong&gt; all of the CPUs inside the container &amp;ndash; it just isn&amp;rsquo;t using all of them.  See &lt;a href=&#34;https://github.com/docker/docker/issues/20770&#34; target=&#34;_blank&#34;&gt;https://github.com/docker/docker/issues/20770&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h4 id=&#34;memory-constraints&#34;&gt;Memory Constraints&lt;/h4&gt;

&lt;p&gt;You can also set &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#/user-memory-constraints&#34; target=&#34;_blank&#34;&gt;memory constraints&lt;/a&gt; on Docker:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -it -m 300M ubuntu:14.04 /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;capabilities&#34;&gt;Capabilities&lt;/h4&gt;

&lt;p&gt;Linux capabilities can be set by using &lt;code&gt;cap-add&lt;/code&gt; and &lt;code&gt;cap-drop&lt;/code&gt;.  See &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities&#34; target=&#34;_blank&#34;&gt;https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities&lt;/a&gt; for details.  This should be used for greater security.&lt;/p&gt;

&lt;p&gt;To mount a FUSE based filesystem, you need to combine both &amp;ndash;cap-add and &amp;ndash;device:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -it --cap-add SYS_ADMIN --device /dev/fuse sshfs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Give access to a single device:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -it --device=/dev/ttyUSB0 debian bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Give access to all devices:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -it --privileged -v /dev/bus/usb:/dev/bus/usb debian bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;more info about privileged containers &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;info-1&#34;&gt;Info&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/ps&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker ps&lt;/code&gt;&lt;/a&gt; shows running containers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/logs&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker logs&lt;/code&gt;&lt;/a&gt; gets logs from container.  (You can use a custom log driver, but logs is only available for &lt;code&gt;json-file&lt;/code&gt; and &lt;code&gt;journald&lt;/code&gt; in 1.10).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/inspect&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker inspect&lt;/code&gt;&lt;/a&gt; looks at all the info on a container (including IP address).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/events&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker events&lt;/code&gt;&lt;/a&gt; gets events from container.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/port&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker port&lt;/code&gt;&lt;/a&gt; shows public facing port of container.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/top&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker top&lt;/code&gt;&lt;/a&gt; shows running processes in container.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/stats&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker stats&lt;/code&gt;&lt;/a&gt; shows containers&amp;rsquo; resource usage statistics.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/diff&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker diff&lt;/code&gt;&lt;/a&gt; shows changed files in the container&amp;rsquo;s FS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;docker ps -a&lt;/code&gt; shows running and stopped containers.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker stats --all&lt;/code&gt; shows a running list of containers.&lt;/p&gt;

&lt;h3 id=&#34;import-export&#34;&gt;Import / Export&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cp&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker cp&lt;/code&gt;&lt;/a&gt; copies files or folders between a container and the local filesystem.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/export&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker export&lt;/code&gt;&lt;/a&gt; turns container filesystem into tarball archive stream to STDOUT.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;executing-commands&#34;&gt;Executing Commands&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/exec&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker exec&lt;/code&gt;&lt;/a&gt; to execute a command in container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To enter a running container, attach a new shell process to a running container called foo, use: &lt;code&gt;docker exec -it foo /bin/bash&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34; target=&#34;_blank&#34;&gt;The configuration file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sets up a Docker container when you run &lt;code&gt;docker build&lt;/code&gt; on it. Vastly preferable to &lt;code&gt;docker commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are some common text editors and their syntax highlighting modules you could use to create Dockerfiles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://packagecontrol.io/packages/Dockerfile%20Syntax%20Highlighting&#34; target=&#34;_blank&#34;&gt;Sublime Text 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/language-docker&#34; target=&#34;_blank&#34;&gt;Atom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ekalinin/Dockerfile.vim&#34; target=&#34;_blank&#34;&gt;Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spotify/dockerfile-mode&#34; target=&#34;_blank&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Also see &lt;a href=&#34;https://domeide.github.io/&#34; target=&#34;_blank&#34;&gt;Docker meets the IDE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;instructions&#34;&gt;Instructions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#dockerignore-file&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.dockerignore&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#from&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;FROM&lt;/code&gt;&lt;/a&gt; Sets the Base Image for subsequent instructions.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#maintainer-deprecated&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;MAINTAINER&lt;/code&gt; (deprecated - use LABEL instead)&lt;/a&gt; Set the Author field of the generated images.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#run&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;RUN&lt;/code&gt;&lt;/a&gt; execute any commands in a new layer on top of the current image and commit the results.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#cmd&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;CMD&lt;/code&gt;&lt;/a&gt; provide defaults for an executing container.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#expose&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;EXPOSE&lt;/code&gt;&lt;/a&gt; informs Docker that the container listens on the specified network ports at runtime.  NOTE: does not actually make ports accessible.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#env&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ENV&lt;/code&gt;&lt;/a&gt; sets environment variable.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#add&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ADD&lt;/code&gt;&lt;/a&gt; copies new files, directories or remote file to container.  Invalidates caches. Avoid &lt;code&gt;ADD&lt;/code&gt; and use &lt;code&gt;COPY&lt;/code&gt; instead.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#copy&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;COPY&lt;/code&gt;&lt;/a&gt; copies new files or directories to container.  Note that this only copies as root, so you have to chown manually regardless of your USER / WORKDIR setting.  See &lt;a href=&#34;https://github.com/moby/moby/issues/30110&#34; target=&#34;_blank&#34;&gt;https://github.com/moby/moby/issues/30110&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#entrypoint&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt;&lt;/a&gt; configures a container that will run as an executable.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#volume&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;VOLUME&lt;/code&gt;&lt;/a&gt; creates a mount point for externally mounted volumes or other containers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#user&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;USER&lt;/code&gt;&lt;/a&gt; sets the user name for following RUN / CMD / ENTRYPOINT commands.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#workdir&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;WORKDIR&lt;/code&gt;&lt;/a&gt; sets the working directory.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#arg&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ARG&lt;/code&gt;&lt;/a&gt; defines a build-time variable.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#onbuild&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ONBUILD&lt;/code&gt;&lt;/a&gt; adds a trigger instruction when the image is used as the base for another build.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#stopsignal&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;STOPSIGNAL&lt;/code&gt;&lt;/a&gt; sets the system call signal that will be sent to the container to exit.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/userguide/labels-custom-metadata/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;LABEL&lt;/code&gt;&lt;/a&gt; apply key/value metadata to your images, containers, or daemons.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://flux7.com/blogs/docker/docker-tutorial-series-part-3-automation-is-the-word-using-dockerfile/&#34; target=&#34;_blank&#34;&gt;Flux7&amp;rsquo;s Dockerfile Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#dockerfile-examples&#34; target=&#34;_blank&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/&#34; target=&#34;_blank&#34;&gt;Best practices for writing Dockerfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crosbymichael.com/&#34; target=&#34;_blank&#34;&gt;Michael Crosby&lt;/a&gt; has some more &lt;a href=&#34;http://crosbymichael.com/dockerfile-best-practices.html&#34; target=&#34;_blank&#34;&gt;Dockerfiles best practices&lt;/a&gt; / &lt;a href=&#34;http://crosbymichael.com/dockerfile-best-practices-take-2.html&#34; target=&#34;_blank&#34;&gt;take 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jonathan.bergknoff.com/journal/building-good-docker-images&#34; target=&#34;_blank&#34;&gt;Building Good Docker Images&lt;/a&gt; / &lt;a href=&#34;http://jonathan.bergknoff.com/journal/building-better-docker-images&#34; target=&#34;_blank&#34;&gt;Building Better Docker Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/garethr/managing-container-configuration-with-metadata&#34; target=&#34;_blank&#34;&gt;Managing Container Configuration with Metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rock-it.pl/how-to-write-excellent-dockerfiles/&#34; target=&#34;_blank&#34;&gt;How to write excellent Dockerfiles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;docker-version&#34;&gt;Docker Version&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It is very important that you always know the current version of Docker you are currently running on at any point in time.&lt;/em&gt;
This is very helpful because you get to know what features are compatible with what you have running.
This is also important because you know what containers to run from the docker store when you are trying to get template containers.
That said let see how to know what version of docker we have running currently&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/version/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker version&lt;/code&gt;&lt;/a&gt; checks what version of docker you have running&lt;/li&gt;
&lt;li&gt;Usage: &lt;code&gt;docker version [OPTIONS]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the server version&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker version --format &#39;{{.Server.Version}}&#39;

1.8.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dump raw JSON data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker version --format &#39;{{json .}}&#39;

{&amp;quot;Client&amp;quot;:{&amp;quot;Version&amp;quot;:&amp;quot;1.8.0&amp;quot;,&amp;quot;ApiVersion&amp;quot;:&amp;quot;1.20&amp;quot;,&amp;quot;GitCommit&amp;quot;:&amp;quot;f5bae0a&amp;quot;,&amp;quot;GoVersion&amp;quot;:&amp;quot;go1.4.2&amp;quot;,&amp;quot;Os&amp;quot;:&amp;quot;linux&amp;quot;,&amp;quot;Arch&amp;quot;:&amp;quot;am&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cleaning-up&#34;&gt;Cleaning up&lt;/h3&gt;

&lt;p&gt;While you can use the &lt;code&gt;docker rmi&lt;/code&gt; command to remove specific images, there&amp;rsquo;s a tool called &lt;a href=&#34;https://github.com/spotify/docker-gc&#34; target=&#34;_blank&#34;&gt;docker-gc&lt;/a&gt; that will safely clean up images that are no longer used by any containers.&lt;/p&gt;

&lt;h3 id=&#34;load-save-image&#34;&gt;Load/Save image&lt;/h3&gt;

&lt;p&gt;Load an image from file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker load &amp;lt; my_image.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save an existing image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker save my_image:my_tag | gzip &amp;gt; my_image.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;import-export-container&#34;&gt;Import/Export container&lt;/h3&gt;

&lt;p&gt;Import a container as an image from file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat my_container.tar.gz | docker import - my_image:my_tag
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Export an existing container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker export my_container | gzip &amp;gt; my_container.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;p&gt;The difference between &lt;em&gt;loading a saved image&lt;/em&gt; and importing an exported &lt;em&gt;container as an image&lt;/em&gt;&lt;/p&gt;

&lt;/div&gt;

Loading an image using the &lt;code&gt;load&lt;/code&gt; command creates a new image including its history.&lt;br /&gt;
Importing a container as an image using the &lt;code&gt;import&lt;/code&gt; command creates a new image, &lt;strong&gt;excluding the history,&lt;/strong&gt; which results in a &lt;em&gt;smaller image size compared to loading an image&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;networks&#34;&gt;Networks&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker has a &lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/&#34; target=&#34;_blank&#34;&gt;networks&lt;/a&gt; feature.
Not much is known about it, so this is a good place to expand the cheat sheet.
There is a note saying that it&amp;rsquo;s a good way to configure docker containers to talk to each other without using ports.
See &lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/work-with-networks/&#34; target=&#34;_blank&#34;&gt;working with networks&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;lifecycle-2&#34;&gt;Lifecycle&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/network_create/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker network create&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/network_rm/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker network rm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;info-2&#34;&gt;Info&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/network_ls/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker network ls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/network_inspect/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker network inspect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;connection&#34;&gt;Connection&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/network_connect/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker network connect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/network_disconnect/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker network disconnect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can specify a &lt;a href=&#34;https://blog.jessfraz.com/post/ips-for-all-the-things/&#34; target=&#34;_blank&#34;&gt;specific IP address for a container&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# create a new bridge network with your subnet and gateway for your ip block
$ docker network create --subnet 203.0.113.0/24 --gateway 203.0.113.254 iptastic

# run a nginx container with a specific ip in that block
$ docker run --rm -it --net iptastic --ip 203.0.113.2 nginx

# curl the ip from any other place (assuming this is a public ip block duh)
$ curl 203.0.113.2
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;registry-repository&#34;&gt;Registry &amp;amp; Repository&lt;/h2&gt;

&lt;p&gt;A repository is a &lt;em&gt;hosted&lt;/em&gt; collection of tagged images that together create the file system for a container.&lt;/p&gt;

&lt;p&gt;A registry is a &lt;em&gt;host&lt;/em&gt; &amp;ndash; a server that stores repositories and provides an HTTP API for &lt;a href=&#34;https://docs.docker.com/engine/tutorials/dockerrepos/&#34; target=&#34;_blank&#34;&gt;managing the uploading and downloading of repositories&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker.com hosts its own &lt;a href=&#34;https://hub.docker.com/&#34; target=&#34;_blank&#34;&gt;index&lt;/a&gt; to a central registry which contains a large number of repositories.&lt;/p&gt;

&lt;p&gt;Having said that, the central docker registry &lt;a href=&#34;https://titanous.com/posts/docker-insecurity&#34; target=&#34;_blank&#34;&gt;does not do a good job of verifying images&lt;/a&gt; and should be avoided if you&amp;rsquo;re worried about security.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/login&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker login&lt;/code&gt;&lt;/a&gt; to login to a registry.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/logout&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker logout&lt;/code&gt;&lt;/a&gt; to logout from a registry.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/search&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker search&lt;/code&gt;&lt;/a&gt; searches registry for image.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/pull&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker pull&lt;/code&gt;&lt;/a&gt; pulls an image from registry to local machine.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/push&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker push&lt;/code&gt;&lt;/a&gt; pushes an image to the registry from local machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;run-local-registry&#34;&gt;Run local registry&lt;/h3&gt;

&lt;p&gt;You can run a local registry by using the &lt;a href=&#34;https://github.com/docker/distribution&#34; target=&#34;_blank&#34;&gt;docker distribution&lt;/a&gt; project and looking at the &lt;a href=&#34;https://github.com/docker/docker.github.io/blob/master/registry/deploying.md&#34; target=&#34;_blank&#34;&gt;local deploy&lt;/a&gt; instructions.&lt;/p&gt;

&lt;p&gt;Also see the &lt;a href=&#34;https://groups.google.com/a/dockerproject.org/forum/#!forum/distribution&#34; target=&#34;_blank&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;layers&#34;&gt;Layers&lt;/h3&gt;

&lt;p&gt;The versioned filesystem in Docker is based on layers. They&amp;rsquo;re like &lt;a href=&#34;https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/&#34; target=&#34;_blank&#34;&gt;git commits or changesets for filesystems&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;Links are how Docker containers talk to each other &lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/default_network/dockerlinks/&#34; target=&#34;_blank&#34;&gt;through TCP/IP ports&lt;/a&gt;. &lt;a href=&#34;https://docs.docker.com/engine/examples/running_redis_service/&#34; target=&#34;_blank&#34;&gt;Linking into Redis&lt;/a&gt; and &lt;a href=&#34;https://blogs.atlassian.com/2013/11/docker-all-the-things-at-atlassian-automation-and-wiring/&#34; target=&#34;_blank&#34;&gt;Atlassian&lt;/a&gt; show worked examples. You can also resolve &lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/default_network/dockerlinks/#/updating-the-etchosts-file&#34; target=&#34;_blank&#34;&gt;links by hostname&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This has been deprected to some extent by &lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/#user-defined-networks&#34; target=&#34;_blank&#34;&gt;user-defined networks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: If you want containers to ONLY communicate with each other through links, start the docker daemon with &lt;code&gt;-icc=false&lt;/code&gt; to disable inter process communication.&lt;/p&gt;

&lt;p&gt;If you have a container with the name CONTAINER (specified by &lt;code&gt;docker run --name CONTAINER&lt;/code&gt;) and in the Dockerfile, it has an exposed port:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EXPOSE 1337
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then if we create another container called LINKED like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --link CONTAINER:ALIAS --name LINKED user/wordpress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the exposed ports and aliases of CONTAINER will show up in LINKED with the following environment variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ALIAS_PORT_1337_TCP_PORT
$ALIAS_PORT_1337_TCP_ADDR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can connect to it that way.&lt;/p&gt;

&lt;p&gt;To delete links, use &lt;code&gt;docker rm --link&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Generally, linking between docker services is a subset of &amp;ldquo;service discovery&amp;rdquo;, a big problem if you&amp;rsquo;re planning to use Docker at scale in production.  Please read &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/the-docker-ecosystem-service-discovery-and-distributed-configuration-stores&#34; target=&#34;_blank&#34;&gt;The Docker Ecosystem: Service Discovery and Distributed Configuration Stores&lt;/a&gt; for more info.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;volumes&#34;&gt;Volumes&lt;/h2&gt;

&lt;p&gt;Docker volumes are &lt;a href=&#34;https://docs.docker.com/engine/tutorials/dockervolumes/&#34; target=&#34;_blank&#34;&gt;free-floating filesystems&lt;/a&gt;. They don&amp;rsquo;t have to be connected to a particular container. You should use volumes mounted from &lt;a href=&#34;https://medium.com/@ramangupta/why-docker-data-containers-are-good-589b3c6c749e&#34; target=&#34;_blank&#34;&gt;data-only containers&lt;/a&gt; for portability.&lt;/p&gt;

&lt;h3 id=&#34;lifecycle-3&#34;&gt;Lifecycle&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/volume_create/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker volume create&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/volume_rm/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker volume rm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;info-3&#34;&gt;Info&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/volume_ls/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker volume ls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/volume_inspect/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;docker volume inspect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Volumes are useful in situations where you can&amp;rsquo;t use links (which are TCP/IP only). For instance, if you need to have two docker instances communicate by leaving stuff on the filesystem.&lt;/p&gt;

&lt;p&gt;You can mount them in several docker containers at once, using &lt;code&gt;docker run --volumes-from&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because volumes are isolated filesystems, they are often used to store state from computations between transient containers. That is, you can have a stateless and transient container run from a recipe, blow it away, and then have a second instance of the transient container pick up from where the last one left off.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;http://crosbymichael.com/advanced-docker-volumes.html&#34; target=&#34;_blank&#34;&gt;advanced volumes&lt;/a&gt; for more details. Container42 is &lt;a href=&#34;http://container42.com/2014/11/03/docker-indepth-volumes/&#34; target=&#34;_blank&#34;&gt;also helpful&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&#34;https://docs.docker.com/engine/tutorials/dockervolumes/#mount-a-host-directory-as-a-data-volume&#34; target=&#34;_blank&#34;&gt;map MacOS host directories as docker volumes&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -v /Users/wsargent/myapp/src:/src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use remote NFS volumes if you&amp;rsquo;re &lt;a href=&#34;https://docs.docker.com/engine/tutorials/dockervolumes/#/mount-a-shared-storage-volume-as-a-data-volume&#34; target=&#34;_blank&#34;&gt;feeling brave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may also consider running data-only containers as described &lt;a href=&#34;http://container42.com/2013/12/16/persistent-volumes-with-docker-container-as-volume-pattern/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; to provide some data portability.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#volumes-can-be-files&#34;&gt;Be aware that you can mount files as volumes.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;exposing-ports&#34;&gt;Exposing ports&lt;/h2&gt;

&lt;p&gt;Exposing incoming ports through the host container is &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#expose-incoming-ports&#34; target=&#34;_blank&#34;&gt;fiddly but doable&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is done by mapping the container port to the host port (only using localhost interface) using &lt;code&gt;-p&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -p 127.0.0.1:$HOSTPORT:$CONTAINERPORT --name CONTAINER -t someimage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can tell Docker that the container listens on the specified network ports at runtime by using &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#expose&#34; target=&#34;_blank&#34;&gt;EXPOSE&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EXPOSE &amp;lt;CONTAINERPORT&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that EXPOSE does not expose the port itself &amp;ndash; only &lt;code&gt;-p&lt;/code&gt; will do that. To expose the container&amp;rsquo;s port on your localhost&amp;rsquo;s port:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iptables -t nat -A DOCKER -p tcp --dport &amp;lt;LOCALHOSTPORT&amp;gt; -j DNAT --to-destination &amp;lt;CONTAINERIP&amp;gt;:&amp;lt;PORT&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re running Docker in Virtualbox, you then need to forward the port there as well, using &lt;a href=&#34;https://docs.vagrantup.com/v2/networking/forwarded_ports.html&#34; target=&#34;_blank&#34;&gt;forwarded_port&lt;/a&gt;. Define a range of ports in your Vagrantfile like this so you can dynamically map them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  ...

  (49000..49900).each do |port|
    config.vm.network :forwarded_port, :host =&amp;gt; port, :guest =&amp;gt; port
  end

  ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you forget what you mapped the port to on the host container, use &lt;code&gt;docker port&lt;/code&gt; to show it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker port CONTAINER $CONTAINERPORT
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;best-practices&#34;&gt;Best Practices&lt;/h2&gt;

&lt;p&gt;This is where general Docker best practices and war stories go:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gregoryszorc.com/blog/2014/10/16/the-rabbit-hole-of-using-docker-in-automated-tests/&#34; target=&#34;_blank&#34;&gt;The Rabbit Hole of Using Docker in Automated Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/bridgetkromhout&#34; target=&#34;_blank&#34;&gt;Bridget Kromhout&lt;/a&gt; has a useful blog post on &lt;a href=&#34;http://sysadvent.blogspot.co.uk/2014/12/day-1-docker-in-production-reality-not.html&#34; target=&#34;_blank&#34;&gt;running Docker in production&lt;/a&gt; at Dramafever.&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s also a best practices &lt;a href=&#34;http://developers.lyst.com/devops/2014/12/08/docker/&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt; from Lyst.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tersesystems.com/2013/11/20/building-a-development-environment-with-docker/&#34; target=&#34;_blank&#34;&gt;Building a Development Environment With Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://samsaffron.com/archive/2013/11/07/discourse-in-a-docker-container&#34; target=&#34;_blank&#34;&gt;Discourse in a Docker Container&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;security&#34;&gt;Security&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This is where security tips about Docker go. The Docker &lt;a href=&#34;https://docs.docker.com/engine/security/security/&#34; target=&#34;_blank&#34;&gt;security&lt;/a&gt; page goes into more detail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First things first: &lt;strong&gt;Docker runs as root.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are in the &lt;code&gt;docker&lt;/code&gt; group, you effectively &lt;a href=&#34;http://reventlov.com/advisories/using-the-docker-command-to-root-the-host&#34; target=&#34;_blank&#34;&gt;have root access&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;p&gt;If you &lt;em&gt;expose the docker UNIX socket to a container&lt;/em&gt;, you are giving the container &lt;a href=&#34;https://www.lvh.io/posts/dont-expose-the-docker-socket-not-even-to-a-container.html&#34; target=&#34;_blank&#34;&gt;root access to the host&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;Docker should not be your only defense. You should secure and harden it.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;The security tips following are useful if you&amp;rsquo;ve already hardened containers in the past, but are &lt;strong&gt;not a substitute for understanding.&lt;/strong&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:security&#34;&gt;&lt;a href=&#34;#fn:security&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;security-tips&#34;&gt;Security Tips&lt;/h3&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;For greatest security, you want to run Docker inside a virtual machine.
(Source: Docker Security Team Lead  &lt;a href=&#34;http://www.slideshare.net/jpetazzo/linux-containers-lxc-docker-and-security&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt; / &lt;a href=&#34;http://www.projectatomic.io/blog/2014/08/is-it-safe-a-look-at-docker-and-security-from-linuxcon/&#34; target=&#34;_blank&#34;&gt;notes&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Then, run with AppArmor / seccomp / SELinux / grsec etc to &lt;a href=&#34;http://linux-audit.com/docker-security-best-practices-for-your-vessel-and-containers/&#34; target=&#34;_blank&#34;&gt;limit the container permissions&lt;/a&gt;. See the &lt;a href=&#34;https://blog.docker.com/2016/02/docker-engine-1-10-security/&#34; target=&#34;_blank&#34;&gt;Docker 1.10 security features&lt;/a&gt; for more details.&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;Docker image ids are &lt;a href=&#34;https://medium.com/@quayio/your-docker-image-ids-are-secrets-and-its-time-you-treated-them-that-way-f55e9f14c1a4&#34; target=&#34;_blank&#34;&gt;sensitive information&lt;/a&gt; and should not be exposed to the outside world. Treat them like passwords.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;See the &lt;a href=&#34;https://github.com/konstruktoid/Docker/blob/master/Security/CheatSheet.adoc&#34; target=&#34;_blank&#34;&gt;Docker Security Cheat Sheet&lt;/a&gt; by &lt;a href=&#34;https://github.com/konstruktoid&#34; target=&#34;_blank&#34;&gt;Thomas Sjögren&lt;/a&gt;: some good stuff about container hardening in there.&lt;/p&gt;

&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;p&gt;Check out the &lt;strong&gt;&lt;a href=&#34;https://github.com/docker/docker-bench-security&#34; target=&#34;_blank&#34;&gt;docker bench security script&lt;/a&gt;&lt;/strong&gt; for a security benchmark.&lt;/p&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Download the &lt;a href=&#34;https://blog.docker.com/2015/05/understanding-docker-security-and-best-practices/&#34; target=&#34;_blank&#34;&gt;white papers&lt;/a&gt; and subscribe to the &lt;a href=&#34;https://www.docker.com/docker-security&#34; target=&#34;_blank&#34;&gt;mailing lists&lt;/a&gt; (unfortunately Docker does not have a unique mailing list, only dev / user). To begin with, see this (foot)note from the cheatsheet &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:begin&#34;&gt;&lt;a href=&#34;#fn:begin&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;p&gt;Since Docker 1.11, you can easily limit the number of active processes running inside a container to prevent fork bombs.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;This requires a Linux kernel &amp;gt;= 4.3 with &lt;code&gt;CGROUP_PIDS=y&lt;/code&gt; to be in the kernel configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --pids-limit=64
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-&#34;&gt;
  &lt;p&gt;Also available since docker 1.11 is the ability to prevent processes from gaining new privileges.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;This feature have been in the Linux kernel since version 3.5. You can read more about it in &lt;a href=&#34;http://www.projectatomic.io/blog/2016/03/no-new-privs-docker/&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt; blog post.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --security-opt=no-new-privileges
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the &lt;a href=&#34;http://container-solutions.com/content/uploads/2015/06/15.06.15_DockerCheatSheet_A2.pdf&#34; target=&#34;_blank&#34;&gt;Docker Security Cheat Sheet&lt;/a&gt; (it&amp;rsquo;s in PDF which makes it hard to use, so copying below) by &lt;a href=&#34;http://container-solutions.com/is-docker-safe-for-production/&#34; target=&#34;_blank&#34;&gt;Container Solutions&lt;/a&gt;:&lt;/p&gt;

&lt;h3 id=&#34;making-docker-safe-for-production&#34;&gt;Making Docker Safe for Production&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Turn off interprocess communication with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker -d --icc=false --iptables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set the container to be read-only:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --read-only
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify images with a hashsum:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull debian@sha256:a25306f3850e1bd44541976aa7b5fd0a29be
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set volumes to be read only:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -v $(pwd)/secrets:/secrets:ro debian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Define and run a user in your Dockerfile so you don&amp;rsquo;t run as root inside the container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN groupadd -r user &amp;amp;&amp;amp; useradd -r -g user user
USER user
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;user-namespaces&#34;&gt;User Namespaces&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s also work on &lt;a href=&#34;https://s3hh.wordpress.com/2013/07/19/creating-and-using-containers-without-privilege/&#34; target=&#34;_blank&#34;&gt;user namespaces&lt;/a&gt; &amp;ndash; it is in 1.10 but is not enabled by default.&lt;/p&gt;

&lt;p&gt;To enable user namespaces (&amp;ldquo;remap the userns&amp;rdquo;) in Ubuntu 15.10, &lt;a href=&#34;https://raesene.github.io/blog/2016/02/04/Docker-User-Namespaces/&#34; target=&#34;_blank&#34;&gt;follow the blog example&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;security-videos&#34;&gt;Security Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/04LOuMgNj9U&#34; target=&#34;_blank&#34;&gt;Using Docker Safely&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/KmxOXmPhZbk&#34; target=&#34;_blank&#34;&gt;Securing your applications using Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/a9lE9Urr6AQ&#34; target=&#34;_blank&#34;&gt;Container security: Do containers actually contain?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=iN6QbszB1R8&#34; target=&#34;_blank&#34;&gt;Linux Containers: Future or Fantasy?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;security-roadmap&#34;&gt;Security Roadmap&lt;/h3&gt;

&lt;p&gt;The Docker roadmap talks about &lt;a href=&#34;https://github.com/docker/docker/blob/master/ROADMAP.md#11-security&#34; target=&#34;_blank&#34;&gt;seccomp support&lt;/a&gt;.
There is an AppArmor policy generator called &lt;a href=&#34;https://github.com/jfrazelle/bane&#34; target=&#34;_blank&#34;&gt;bane&lt;/a&gt;, and they&amp;rsquo;re working on &lt;a href=&#34;https://github.com/docker/docker/issues/17142&#34; target=&#34;_blank&#34;&gt;security profiles&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;useful-commands-tips&#34;&gt;Useful Commands/Tips&lt;/h1&gt;

&lt;p&gt;Sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sssslide.com/speakerdeck.com/bmorearty/15-docker-tips-in-5-minutes&#34; target=&#34;_blank&#34;&gt;15 Docker Tips in 5 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codefresh.io/blog/everyday-hacks-docker/&#34; target=&#34;_blank&#34;&gt;CodeFresh Everyday Hacks Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;

&lt;h3 id=&#34;get-ip-address&#34;&gt;Get IP Address&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker inspect $(dl) | grep -wm1 IPAddress | cut -d &#39;&amp;quot;&#39; -f 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or install &lt;a href=&#34;https://stedolan.github.io/jq/&#34; target=&#34;_blank&#34;&gt;jq&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker inspect $(dl) | jq -r &#39;.[0].NetworkSettings.IPAddress&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or using a &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/inspect&#34; target=&#34;_blank&#34;&gt;go template&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker inspect -f &#39;{{ .NetworkSettings.IPAddress }}&#39; &amp;lt;container_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or when building an image from Dockerfile, when you want to pass in a build argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DOCKER_HOST_IP=`ifconfig | grep -E &amp;quot;([0-9]{1,3}\.){3}[0-9]{1,3}&amp;quot; | grep -v 127.0.0.1 | awk &#39;{ print $2 }&#39; | cut -f2 -d: | head -n1`
echo DOCKER_HOST_IP = $DOCKER_HOST_IP
docker build \
  --build-arg ARTIFACTORY_ADDRESS=$DOCKER_HOST_IP 
  -t sometag \
  some-directory/
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;get-port-mapping&#34;&gt;Get Port Mapping&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker inspect -f &#39;{{range $p, $conf := .NetworkSettings.Ports}} {{$p}} -&amp;gt; {{(index $conf 0).HostPort}} {{end}}&#39; &amp;lt;containername&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;management&#34;&gt;Management&lt;/h2&gt;

&lt;h3 id=&#34;find-containers-using-regular-expression&#34;&gt;Find containers using regular expression:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;for i in $(docker ps -a | grep &amp;quot;REGEXP_PATTERN&amp;quot; | cut -f1 -d&amp;quot; &amp;quot;); do echo $i; done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-environment-settings&#34;&gt;Get environment settings&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm ubuntu env
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;kill-running-containers&#34;&gt;Kill running containers&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker kill $(docker ps -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete-all-containers-force-running-or-stopped-containers&#34;&gt;Delete all containers (force!! running or stopped containers)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker rm -f $(docker ps -qa)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete-old-containers&#34;&gt;Delete old containers&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker ps -a | grep &#39;weeks ago&#39; | awk &#39;{print $1}&#39; | xargs docker rm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete-stopped-containers&#34;&gt;Delete stopped containers&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker rm -v $(docker ps -a -q -f status=exited)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete-containers-after-stopping&#34;&gt;Delete containers after stopping&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker stop $(docker ps -aq) &amp;amp;&amp;amp; docker rm -v $(docker ps -aq)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete-dangling-images&#34;&gt;Delete dangling images&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker rmi $(docker images -q -f dangling=true)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete-all-images&#34;&gt;Delete all images&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker rmi $(docker images -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete-dangling-volumes&#34;&gt;Delete dangling volumes&lt;/h3&gt;

&lt;p&gt;As of Docker 1.9:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker volume rm $(docker volume ls -q -f dangling=true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In 1.9.0, the filter &lt;code&gt;dangling=false&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; work - it is ignored and will list all volumes.&lt;/p&gt;

&lt;h3 id=&#34;show-image-dependencies&#34;&gt;Show image dependencies&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker images -viz | dot -Tpng -o docker.png
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;df&#34;&gt;df&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker system df&lt;/code&gt; presents a summary of the space currently used by different docker objects.&lt;/p&gt;

&lt;h3 id=&#34;heredoc-docker-container&#34;&gt;Heredoc Docker Container&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker build -t htop - &amp;lt;&amp;lt; EOF
FROM alpine
RUN apk --no-cache add htop
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;prune&#34;&gt;Prune&lt;/h3&gt;

&lt;p&gt;The new &lt;a href=&#34;https://github.com/docker/docker/pull/26108&#34; target=&#34;_blank&#34;&gt;Data Management Commands&lt;/a&gt; have landed as of Docker 1.13:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker system prune&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker volume prune&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker network prune&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker container prune&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;last-ids&#34;&gt;Last Ids&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;alias dl=&#39;docker ps -l -q&#39;
docker run ubuntu echo hello world
docker commit $(dl) helloworld
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;commit&#34;&gt;Commit&lt;/h3&gt;

&lt;p&gt;with command (needs Dockerfile)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker commit -run=&#39;{&amp;quot;Cmd&amp;quot;:[&amp;quot;postgres&amp;quot;, &amp;quot;-too -many -opts&amp;quot;]}&#39; $(dl) postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h2&gt;

&lt;h3 id=&#34;monitor-system-resource-utilization-for-running-containers&#34;&gt;Monitor system resource utilization for running containers&lt;/h3&gt;

&lt;p&gt;To check the CPU, memory, and network I/O usage of a single container, you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker stats &amp;lt;container&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For all containers listed by id:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker stats $(docker ps -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For all containers listed by name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker stats $(docker ps --format &#39;{{.Names}}&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For all containers listed by image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps -a -f ancestor=ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove all untagged images&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker rmi $(docker images | grep “^” | awk &#39;{split($0,a,&amp;quot; &amp;quot;); print a[3]}&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove container by a regular expression&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps -a | grep wildfly | awk &#39;{print $1}&#39; | xargs docker rm -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove all exited containers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker rm -f $(docker ps -a | grep Exit | awk &#39;{ print $1 }&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;volumes-can-be-files&#34;&gt;Volumes can be files&lt;/h3&gt;

&lt;p&gt;Be aware that you can mount files as volumes. For example you can inject a configuration file like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# copy file from container
docker run --rm httpd cat /usr/local/apache2/conf/httpd.conf &amp;gt; httpd.conf

# edit file
vim httpd.conf

# start container with modified configuration
docker run --rm -ti -v &amp;quot;$PWD/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro&amp;quot; -p &amp;quot;80:80&amp;quot; httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;efficiency&#34;&gt;Efficiency&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cleaning &lt;code&gt;APT&lt;/code&gt; in a &lt;code&gt;RUN&lt;/code&gt; layer. &lt;em&gt;Note&lt;/em&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:clean&#34;&gt;&lt;a href=&#34;#fn:clean&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN {apt commands} \
&amp;amp;&amp;amp; apt-get clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Flatten an image&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID=$(docker run -d image-name /bin/bash)
docker export $ID | docker import – flat-image-name
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For backup&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID=$(docker run -d image-name /bin/bash)
(docker export $ID | gzip -c &amp;gt; image.tgz)
gzip -dc image.tgz | docker import - flat-image-name
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;hr /&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:os-footnote&#34;&gt;In this tutorial, we will be using Linux since that is what almost every server runs, but as the principle of Docker is that it makes applications independent of platforms, everything herein should be applicable no matter what machine you are running.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:os-footnote&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:usergroup-caveats&#34;&gt;If testing on a virtual machine, it may be necessary to restart the virtual machine for changes to take effect. On a desktop Linux environment such as X Windows, log out of your session completely and then log back in.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:usergroup-caveats&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:linux-version&#34;&gt;Ubuntu 14.10 and below use &lt;code&gt;upstart&lt;/code&gt;. See the &lt;a href=&#34;https://docs.docker.com/install/linux/linux-postinstall/&#34; target=&#34;_blank&#34;&gt;post-installation&lt;/a&gt; instructions for support.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:linux-version&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:gist&#34;&gt;The gist was scraped and mildly edited on &lt;em&gt;12/22/18&lt;/em&gt;, so it may behoove you to check the original source for any updates. If you find typos/corrections/updates that should be included below, please &lt;a href=&#34;https://www.michaelpilosov.com/#contact&#34;&gt;get in touch&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gist&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:security&#34;&gt;For an understanding of what containers leave exposed, you should read &lt;a href=&#34;https://www.nccgroup.trust/globalassets/our-research/us/whitepapers/2016/april/ncc_group_understanding_hardening_linux_containers-1-1.pdf&#34; target=&#34;_blank&#34;&gt;Understanding and Hardening Linux Containers&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/dyn___&#34; target=&#34;_blank&#34;&gt;Aaron Grattafiori&lt;/a&gt;. This is a complete and comprehensive guide to the issues involved with containers, with a plethora of links and footnotes leading on to yet more useful content.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:security&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:begin&#34;&gt;You should start off by using a kernel with unstable patches for &lt;code&gt;grsecurity / pax&lt;/code&gt; compiled in, such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Alpine_Linux&#34; target=&#34;_blank&#34;&gt;Alpine Linux&lt;/a&gt;. If you are using &lt;code&gt;grsecurity&lt;/code&gt; in production, you should spring for &lt;a href=&#34;https://grsecurity.net/business_support.php&#34; target=&#34;_blank&#34;&gt;commercial support&lt;/a&gt; for the &lt;a href=&#34;https://grsecurity.net/announce.php&#34; target=&#34;_blank&#34;&gt;stable patches&lt;/a&gt;, same as you would do for RedHat. It&amp;rsquo;s $200 a month, which is nothing to your devops budget.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:begin&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:clean&#34;&gt;This should be done in the same layer as other apt commands. Otherwise, the previous layers still persist the original information and your images will still be fat.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:clean&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Jupyter Notebook</title>
      <link>https://www.michaelpilosov.com/openscience/jupyternb/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.michaelpilosov.com/openscience/jupyternb/</guid>
      <description>

&lt;h1 id=&#34;documentation&#34;&gt;Documentation&lt;/h1&gt;

&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;

&lt;h1 id=&#34;configure&#34;&gt;Configure&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>JupyterHub</title>
      <link>https://www.michaelpilosov.com/openscience/jupyterhub/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.michaelpilosov.com/openscience/jupyterhub/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;h1 id=&#34;example&#34;&gt;Example&lt;/h1&gt;

&lt;h1 id=&#34;documentation&#34;&gt;Documentation&lt;/h1&gt;

&lt;h1 id=&#34;labhub&#34;&gt;LabHub&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>JupyterLab</title>
      <link>https://www.michaelpilosov.com/openscience/jupyterlab/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.michaelpilosov.com/openscience/jupyterlab/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;h1 id=&#34;example&#34;&gt;Example&lt;/h1&gt;

&lt;h1 id=&#34;documentation&#34;&gt;Documentation&lt;/h1&gt;

&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;

&lt;h1 id=&#34;configure&#34;&gt;Configure&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Remote Connection</title>
      <link>https://www.michaelpilosov.com/openscience/remote/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.michaelpilosov.com/openscience/remote/</guid>
      <description>

&lt;p&gt;As previously mentioned, the Jupyter Notebook runs in the client (browser) and connects to a server (either running locally or remotely) to perform necessary calculations in a given language.&lt;/p&gt;

&lt;p&gt;The kernels provide the means for establishing this communication, and are effectively what &lt;code&gt;jupyter&lt;/code&gt; (the program) is set up to manage.&lt;/p&gt;

&lt;p&gt;Here, we demonstrate why this approach is so valuable.&lt;/p&gt;

&lt;h1 id=&#34;motivation&#34;&gt;Motivation&lt;/h1&gt;

&lt;p&gt;Assuming you followed the instructions in &lt;a href=&#34;https://www.michaelpilosov.com/openscience/anaconda&#34;&gt;Installing Anaconda&lt;/a&gt; on your local machine, you&amp;rsquo;ll notice that you establish a connection to the server (running in your Terminal session, likely outputting information with green-highlighted time-stamps) through the &amp;ldquo;address&amp;rdquo; &lt;code&gt;localhost&lt;/code&gt;, which references the fact that you are running this server locally.&lt;/p&gt;

&lt;p&gt;However, this means that you can follow those instructions on any server, and with some additional commands (which we will review here), have the ability to connect to your Jupyter session from anywhere!&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:remote&#34;&gt;&lt;a href=&#34;#fn:remote&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;There are a few situations you might find yourself in, and we attempt to address several common ones here.
If there is a scenario that is not covered here that you would like us to write about, please &lt;a href=&#34;https://www.michaelpilosov.com/#contact&#34;&gt;contact us&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;server-on-campus&#34;&gt;Server on Campus&lt;/h1&gt;

&lt;h1 id=&#34;rented-server&#34;&gt;Rented Server&lt;/h1&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:remote&#34;&gt;Provided the machine running Jupyter is one that is publicly accessible. More on that later.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:remote&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Day 3</title>
      <link>https://www.michaelpilosov.com/changelog/day3/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.michaelpilosov.com/changelog/day3/</guid>
      <description>

&lt;p&gt;Today I began to structure and fill in the basic information for the &lt;a href=&#34;https://www.michaelpilosov.com/openscience&#34;&gt;Open Science&lt;/a&gt; Documentation.
It involved some research and collection of resources from disparated places and things I&amp;rsquo;ve done before.&lt;/p&gt;

&lt;p&gt;I also sat down and in a couple minutes managed to figure out the &amp;ldquo;breaking changes&amp;rdquo; to my MathematicalMichael website under Hugo v0.52.
The only file that needed to be changed (before updating the theme, that is) was the &lt;code&gt;$i,&lt;/code&gt; reference in a file I made myself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim themes/academic/layouts/partials/artwork_links.html 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next step was to copy the theme from &lt;code&gt;michaelpilosov/&lt;/code&gt; (which pulled from the github repo only a few days prior, and to which some minor changes were made) into &lt;code&gt;mathematicalmichael/themes/&lt;/code&gt; along with a copy of the config file.&lt;/p&gt;

&lt;p&gt;Once the reference to the new theme is made, I expect a number of things to break.
Here I will attempt to document one-by-one the changes I had to make to port my theme over, which I will attempt to do by leveraging the &amp;ldquo;lookup structure&amp;rdquo; of Hugo (something I read online).
The idea is that rather than make changes to a theme that result in deviations that make merging new changes difficult, one makes changes by copying files into directories that are checked first, before &lt;code&gt;themes/&lt;/code&gt; is searched for &lt;code&gt;layouts&lt;/code&gt; or &lt;code&gt;partials&lt;/code&gt; files.
My hope is that this will aid in future upgrades, since less differences will exist between my version of the theme and the master branch.
A really useful command (for comparing files), that I used to see what needed to change in the master configuration file for my theme (compared to the updated one from this website) was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;diff -y file1.md file2.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which will print out two files side-by-side directly into the UNIX Terminal. Excellent.&lt;/p&gt;

&lt;p&gt;After making the appropriate changes to the &lt;code&gt;config.toml&lt;/code&gt; file (which were all straightforward), I ensured that the site built with the new Hugo &lt;em&gt;and&lt;/em&gt; the new configuration file but &lt;em&gt;without&lt;/em&gt; the new theme. It did. All was well.&lt;/p&gt;

&lt;p&gt;Then I changed the theme to point to the updated one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theme = &amp;quot;hugo-academic&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which yielded the following error (kind of expected to be honest):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Error: 
Error building site: 
failed to render pages: 
render of &amp;quot;home&amp;quot; failed: 
execute of template failed: 
template: index.html:4:3: 
executing &amp;quot;index.html&amp;quot; at &amp;lt;partial &amp;quot;widget_page...&amp;gt;: 

error calling partial: 
&amp;quot;/media/mathematicalmichael/HANK/repos/mathematicalmichael/themes/hugo-academic/layouts/partials/widget_page.html:23:9&amp;quot;: 
execute of template failed: 
template: partials/widget_page.html:23:9: 
executing &amp;quot;partials/widget_page.html&amp;quot; at &amp;lt;partial $widget $par...&amp;gt;: 

error calling partial: 
Partial &amp;quot;widgets/artworks.html&amp;quot; not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So why did this happen?&lt;/p&gt;

&lt;p&gt;Well, I had defined my own template page called &lt;code&gt;artworks&lt;/code&gt; that was modeled on the &lt;code&gt;publications&lt;/code&gt; style of page.
I used this to publish a webpage for each piece of art, complete with a rich tagging-system automated through Python.
I made random art and had written code that created pages for that art to live on.
Any changes made to the front-matter could be easily applied later.&lt;/p&gt;

&lt;p&gt;I believe that simply moving some files to directories that exist &lt;em&gt;above&lt;/em&gt; &lt;code&gt;themes&lt;/code&gt; will resolve my problems.&lt;/p&gt;

&lt;p&gt;However, I know there will be an opportunity to switch to page-bundles and leverage the &lt;code&gt;image-gallery&lt;/code&gt; feature in &lt;code&gt;v3.0&lt;/code&gt; of &lt;code&gt;Hugo-Academic&lt;/code&gt;. My thinking is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead of daily pages, make weekly ones as galleries.&lt;/li&gt;
&lt;li&gt;Alternatively, keep daily postings as-is, and add galleries additionally. See if you can link images to the main folder, so all art can continue to live in one folder without duplicates.&lt;/li&gt;
&lt;li&gt;You can make galleries using page-bundles as a separate way to interact with the art.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Definitely need to integrate a widget page that hosts all the art. I don&amp;rsquo;t want to clutter the home page with everything.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I think that clicking from the main menu to &lt;code&gt;art/&lt;/code&gt; should suffice.&lt;/li&gt;
&lt;li&gt;Curate the experience, minimize contact with &lt;code&gt;/artwork/&lt;/code&gt; page (i.e. make slideshows link to other content rather than the search they perform now, which can be a bit slow.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Since slideshows are just a markdown file, we should have no trouble linking to images in another folder!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;will take some playing around to figure out exactly the right directory structure.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** Main Goal ** for the time being is to make sure the site builds with the new theme. We can add features and functionality later on.
Today&amp;rsquo;s agenda is simply to allow migration to Hugo v0.52 on my Macbook by ensuring the site builds with the new version.
Having the new theme work would be an added bonus.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I suspect all that needs to happen is a little migration of &lt;code&gt;partials&lt;/code&gt; and &lt;code&gt;shortcodes&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp themes/academic/layouts/partials/artwork_* layouts/partials/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Did not change the error.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir layouts/partials/widgets/
cp themes/academic/layouts/partials/widgets/artworks* layouts/partials/widgets/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resolved that but sprang a new error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Error: 
Error building site: 
failed to render pages: 
render of &amp;quot;home&amp;quot; failed: 
execute of template failed: 
template: 
index.html:4:3: 
executing &amp;quot;index.html&amp;quot; at &amp;lt;partial &amp;quot;widget_page...&amp;gt;: 
error calling partial: 
&amp;quot;/media/mathematicalmichael/HANK/repos/mathematicalmichael/themes/hugo-academic/layouts/partials/widget_page.html:23:9&amp;quot;: 
execute of template failed: 
template: 
partials/widget_page.html:23:9: 
executing &amp;quot;partials/widget_page.html&amp;quot; at &amp;lt;partial $widget $par...&amp;gt;: 
error calling partial: 
Partial &amp;quot;widgets/search.html&amp;quot; not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, so let&amp;rsquo;s move &lt;code&gt;widgets/search.html&lt;/code&gt; over?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp themes/academic/layouts/partials/widgets/search.html layouts/partials/widgets/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server --disableFastRender
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that did it! Wow, relatively painless. Now let&amp;rsquo;s see how it looks.&lt;/p&gt;

&lt;p&gt;The layout is dark for some reason&amp;hellip; Enabling light/dark mode shows me the white I want to see but with inverted header.
&lt;code&gt;:mailto&lt;/code&gt; icon is broken. Change to &amp;ldquo;fas&amp;rdquo; instead of &amp;ldquo;fab&amp;rdquo; in &lt;code&gt;config.toml&lt;/code&gt;, line 293.&lt;/p&gt;

&lt;p&gt;Back to the theme.. let&amp;rsquo;s grab a file and move it to the root directory and figure out where to put it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp themes/hugo-academic/data/themes/dark.toml .
mkdir data
mkdir data/themes
mv dark.toml data/themes/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then proceeded to change some things to get the right colors. Still not sure if this is correct. I also changed the theme to &lt;code&gt;self.toml&lt;/code&gt; and referenced that in the &lt;code&gt;config.toml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Next test: Day/Night mode (re-enable, see what happens).&lt;/p&gt;

&lt;p&gt;Day Mode is fine.
Night mode makes my logos look weird (though I do like the look overall). Top bar is also white instead of black for some reason.&lt;/p&gt;

&lt;p&gt;Editing &lt;code&gt;data/themes/self.toml&lt;/code&gt; to rename the theme (mistake to not have done that before), and toggle &lt;code&gt;light = true&lt;/code&gt;, since I did make it into a light theme.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Theme metadata
name = &amp;quot;Self&amp;quot;

# Is theme light or dark?
light = true

# Primary
primary = &amp;quot;hsl(339, 90%, 68%)&amp;quot;
primary_light = &amp;quot;hsl(339, 90%, 78%)&amp;quot;
primary_dark = &amp;quot;hsl(339, 90%, 58%)&amp;quot;

# Menu
menu_primary = &amp;quot;#fff&amp;quot;
menu_text = &amp;quot;rgba(0,0,0,0.6)&amp;quot;
menu_text_active = &amp;quot;hsl(339, 90%, 68%)&amp;quot;
menu_title = &amp;quot;#2b2b2b&amp;quot;

# Home sections
home_section_odd = &amp;quot;rgb(255, 255, 255)&amp;quot;
home_section_even = &amp;quot;rgb(247, 247, 247)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Also broken is the search widget. Sad.&lt;/p&gt;

&lt;p&gt;Disable search widget&amp;hellip; Should not have moved it in the first place!
&lt;em&gt;There is a new search feature&lt;/em&gt; that renders this one useless. I will now remove the &lt;code&gt;search.html&lt;/code&gt; widget (and &lt;code&gt;search.md&lt;/code&gt; from &lt;code&gt;content/home/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Contact form&amp;hellip;
Had to paste in the new format. I was using a custom partial code (note to self&amp;hellip; &lt;em&gt;delete that&lt;/em&gt;) to make a formspree link. Now I don&amp;rsquo;t have to!&lt;/p&gt;

&lt;p&gt;Also, remove &lt;code&gt;Search&lt;/code&gt; from menu in &lt;code&gt;config.toml&lt;/code&gt;.
After deleting &lt;code&gt;layouts/shortcodes/contactme.html&lt;/code&gt; (my custom formspree link), in favor of using the one the upgraded theme provided, it appears that my website is now settled into the new theme. I did have to remove all references to this deleted shortcode, of course.&lt;/p&gt;

&lt;p&gt;Day/night mode works correctly. (would like to make my logo transparent though).&lt;/p&gt;

&lt;p&gt;Okay, well I knew it was too good to be true that things just worked. While pages loaded correctly, before building the final site, I made sure to investigate the directories a bit more and found that a bunch of files prepended with &lt;code&gt;._XXX.md&lt;/code&gt; had populated my website directories.
&lt;em&gt;This must be how they&amp;rsquo;re ensuring backward-compatibility.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, I refactored the pages into page bundles with this shell script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

# Helps migrate from v2.4.0 to v3.0.0
#
# Refactor a page named `X.md` to `content/&amp;lt;section&amp;gt;/X/index.md` to use the
# new page bundles and featured image system
#
# - E.g. a post `content/post/X.md` is converted to `content/post/X/index.md`

refactor_pages_to_page_bundles()
{
  if [ ! -d ./content/ ]; then
    echo &amp;quot;Please run script from root of hugo site&amp;quot;
  fi
  local files=&amp;quot;$(find ./content/ -iname &#39;*.md&#39; -not -iname &#39;*index.md&#39; -not -ipath &#39;./content/home/*&#39;)&amp;quot;
  for file in ${files}; do
    local pagedir=&amp;quot;${file%.md}&amp;quot;

    echo &amp;quot;${file} -&amp;gt; ${pagedir}/index.md&amp;quot;
    if [ ! -d &amp;quot;${pagedir}&amp;quot; ]; then
      mkdir &amp;quot;${pagedir}&amp;quot;
    fi

    mv &amp;quot;${file}&amp;quot; &amp;quot;${pagedir}/index.md&amp;quot;
  done
}

# Bash Strict Mode
set -eu

# set -x
refactor_pages_to_page_bundles &amp;quot;$@&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sourcethemes/academic-scripts/blob/master/refactor-pages-to-page-bundles.sh&#34; target=&#34;_blank&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After poking around, it looks like the pages obey the proper structure now (for the most part)&amp;hellip; There are a few stray &lt;code&gt;.md&lt;/code&gt; files around.&lt;/p&gt;

&lt;p&gt;I will push the changes live but later on go through both websites to ensure that bundles are everywhere and no stray pages are left.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;to-do&#34;&gt;To Do&lt;/h1&gt;

&lt;p&gt;Notably, I will need to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;update my python script that writes project pages and art pages.&lt;/li&gt;
&lt;li&gt;ensure featured images (optional) are properly handled&lt;/li&gt;
&lt;li&gt;find out how galleries can work with the &lt;code&gt;artwork/images&lt;/code&gt; directory, which so far doesn&amp;rsquo;t seem to be conflicting with the page-bundle format.&lt;/li&gt;
&lt;li&gt;Make sure the artwork search works. Seems to be broken, though &lt;code&gt;publications&lt;/code&gt; search still works.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh, I think all that needs to happen is to move
&lt;code&gt;/themes/academic/layouts/artwork&lt;/code&gt; into the &lt;code&gt;layouts&lt;/code&gt; folder I have in my root directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mv themes/academic/layouts/artwork/ layouts/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But that led to an error regarding &lt;code&gt;partial header_image.html&lt;/code&gt;. Thus, it seems like I will need to copy the new publication template over and edit it again. At least this time I will document it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp themes/hugo-academic/layouts/publication/single.html  layouts/artwork/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then I replaced all instances of &lt;code&gt;publication&lt;/code&gt; with &lt;code&gt;artwork&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But that still didn&amp;rsquo;t lead to the filter-ability that I wanted.&lt;/p&gt;

&lt;p&gt;The default behavior was to paginate and list all of the art, which doesn&amp;rsquo;t have image previews but honestly is just fine, especially since it loads quickly.&lt;/p&gt;

&lt;p&gt;The widget on the homepage that links to the search of artwork though is now broken as a consequence. I can fall back on searching by tags, or disable the widget temporarily until I set up galleries for the artworks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If I write a python script that scrapes the &lt;code&gt;artwork/images&lt;/code&gt; folder and creates galleries linked to that, well that would be just perfect.&lt;/li&gt;
&lt;li&gt;This widget can be linked to those galleries, or slideshows.&lt;/li&gt;
&lt;li&gt;Disable it for now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay, later at night I had to come across this as well, but I wanted the listing of artworks in their projects, so I copied the new &lt;code&gt;layouts/partials/project/single.html&lt;/code&gt; into the &lt;code&gt;layouts/partials/projects/&lt;/code&gt; directory I created and pasted the following relevant chunk of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;br&amp;gt;
      &amp;lt;h4&amp;gt; Archive &amp;lt;/h4&amp;gt;
      {{ $items := where (where .Site.RegularPages &amp;quot;Type&amp;quot; &amp;quot;artwork&amp;quot;) &amp;quot;.Params.projects&amp;quot; &amp;quot;intersect&amp;quot; (slice $project) }}
      {{ $items := $items | union (where (where .Site.RegularPages &amp;quot;Type&amp;quot; &amp;quot;artwork&amp;quot;) &amp;quot;.Params.url_project&amp;quot; $project_path) }}
      {{ $arts_len := len $items }}
      {{ if ge $arts_len 1 }}
        &amp;lt;h4&amp;gt;{{ (i18n &amp;quot;artworks&amp;quot;) }}&amp;lt;/h4&amp;gt;
        {{ range $items }}
          {{ if eq $page.Site.Params.projects.artwork_format 1 }}
            {{ partial &amp;quot;artwork_li_detailed&amp;quot; . }}
          {{ else }}
            {{ partial &amp;quot;artwork_li_simple&amp;quot; . }}
          {{ end }}
        {{ end }}
      {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I got my desired lists!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mathematicalmichael.com/project/rnr&#34; target=&#34;_blank&#34;&gt;See here for example&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Demonstration with Jupyter Lab</title>
      <link>https://www.michaelpilosov.com/openscience/demo/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.michaelpilosov.com/openscience/demo/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s first get a feel for the possibilities, and &lt;strong&gt;see&lt;/strong&gt; what is possible by checking out some existing websites, organizations, and repositories.
The idea of removing installation complexities, platform dependencies, etc. from your end-users is beautifully demonstrated by some of the recent advancements made over at &lt;a href=&#34;https://jupyter.org&#34; target=&#34;_blank&#34;&gt;Project Jupyter&lt;/a&gt;, all visible on &lt;a href=&#34;https://github.com/jupyter/&#34; target=&#34;_blank&#34;&gt;their Github repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My favorite example that demonstrates how slick this new approach to setting up programming environmnents is the repository demonstration with &lt;a href=&#34;https://github.com/binder-examples/jupyterlab&#34; target=&#34;_blank&#34;&gt;JupyterLab + Binder&lt;/a&gt; from the &lt;code&gt;binder-examples&lt;/code&gt; repository collection.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It even has an interactive map!!!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Head on over there, click on the little badge that reads &amp;ldquo;launch | binder,&amp;rdquo; and it will automatically open up a notebook for you.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:timeout&#34;&gt;&lt;a href=&#34;#fn:timeout&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
Have a look around, run code, do whatever you like.&lt;/p&gt;

&lt;p&gt;To then see how easy adding functionality is, run the following in a new code-cell in the notebook that opens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;!jupyter labextension install @jupyter-widgets/jupyterlab-manager 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The exclamation point tells the notebook to run the command using &lt;code&gt;bash.&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bash&#34;&gt;&lt;a href=&#34;#fn:bash&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.
Since widgets are already pre-packaged, all we have to do to enable them is to tell JupyterLab to get the necessary Javascript resources to show them to you in your client (web-browser).
A bunch of dialogue should show up, and then once it finishes, replace the code you just ran with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import ipywidgets as wd
wd.FloatSlider()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you should see a slider pop up.&lt;/p&gt;

&lt;p&gt;To avoid this step and ensure that the widget functionality is ready-to-go, one can fork the &lt;a href=&#34;https://github.com/binder-examples/jupyterlab&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;, and edit the file &lt;code&gt;binder/postBuild&lt;/code&gt;, which runs after the initial repository is built (using &lt;a href=&#34;https://github.com/jupyter/repo2docker&#34; target=&#34;_blank&#34;&gt;repo2docker&lt;/a&gt; on the backend) but before the client displays the interface.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:timeout&#34;&gt;&lt;em&gt;Be warned&lt;/em&gt;: After a few minutes of inactivity, the &lt;a href=&#34;https://mybinder.org&#34; target=&#34;_blank&#34;&gt;mybinder.org&lt;/a&gt; service that is hosting the docker container which serves this web application will time-out. This means that it will assume you are done with it and clean up the resources it created for you. Say goodbye to whatever you were working on.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:timeout&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bash&#34;&gt;Alternatively, you could open a new Terminal instance in JupyterLab and run the same code (without the exclamation mark).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bash&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Examples of Existing Projects</title>
      <link>https://www.michaelpilosov.com/openscience/example/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.michaelpilosov.com/openscience/example/</guid>
      <description>&lt;p&gt;There are a number of organizations with deployments you can experiment with.&lt;/p&gt;

&lt;p&gt;We list some of them here, along with useful links for more information (some of these may be turned into future pages).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Anaconda</title>
      <link>https://www.michaelpilosov.com/openscience/anaconda/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.michaelpilosov.com/openscience/anaconda/</guid>
      <description>

&lt;p&gt;These instructions originally appeared on the &lt;a href=&#34;https://www.mathematicalmichael.com&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Resources&amp;rdquo; page of my website&lt;/a&gt;, where I link to my &lt;a href=&#34;https://gist.github.com/mpilosov/233ccfae58d182d43f690be209b58ba5&#34; target=&#34;_blank&#34;&gt;Github Gist&lt;/a&gt;.
As of &lt;em&gt;Dec 21, 2018&lt;/em&gt;, I am abandoning the aforementioned gist and will keep this webpage updated as my primary source of information for installing Anaconda&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:note&#34;&gt;&lt;a href=&#34;#fn:note&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h1 id=&#34;anaconda-basics&#34;&gt;Anaconda Basics&lt;/h1&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;It is a package manager.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;WRITE MORE ABOUT WHAT A PACKAGE MANAGER IS/DOES AND WHY IT SHOULD BE USED&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;download&#34;&gt;Download&lt;/h2&gt;

&lt;p&gt;Go download it from
&lt;a href=&#34;https://www.anaconda.com/download/&#34; target=&#34;_blank&#34;&gt;https://www.anaconda.com/download/&lt;/a&gt;
for your Linux/Windows/OSX&lt;/p&gt;

&lt;p&gt;I like to use&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wget http://repo.continuum.io/archive/Anaconda3-5.0.1-Linux-x86_64.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or if I want to keep things lightweight (may lead to more manual installations later on):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;It will likely be saved in the Downloads folder, so you will install it with something like&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash ~/Downloads/Anaconda3-5.0.1-Linux-x86_64.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Use all the defaults, agree to everything, and at the end, hit &lt;code&gt;ENTER&lt;/code&gt; to prepend it to your &lt;code&gt;PATH&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;environments&#34;&gt;Environments&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s create an environment for python3:&lt;br /&gt;
&lt;code&gt;conda create -n py3 python=3.6&lt;/code&gt; where &lt;code&gt;py3&lt;/code&gt; is just my personal preferred shorthand for python 3. Feel free to use your own.&lt;/p&gt;

&lt;p&gt;And one for python2:&lt;br /&gt;
&lt;code&gt;conda create -n py2 python=2.7&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To remove:&lt;br /&gt;
&lt;code&gt;conda remove --name py2 --all&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can now switch between versions of python with commands like&lt;br /&gt;
&lt;code&gt;source activate py3&lt;/code&gt; and &lt;code&gt;source activate py2&lt;/code&gt; and then &lt;code&gt;source deactivate&lt;/code&gt; when you&amp;rsquo;re ready to be done.&lt;/p&gt;

&lt;h1 id=&#34;diving-deeper&#34;&gt;Diving Deeper&lt;/h1&gt;

&lt;h2 id=&#34;widgets&#34;&gt;Widgets&lt;/h2&gt;

&lt;p&gt;Overview:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install ipywidgets&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;jupyter nbextension install --py --user widgetsnbextension&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;jupyter nbextension enable --py widgetsnbextension&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;More information about widgets &lt;a href=&#34;https://ipywidgets.readthedocs.io/en/stable/user_install.html&#34; target=&#34;_blank&#34;&gt;can be found here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, in each of these environments, run&lt;br /&gt;
&lt;code&gt;conda install -c conda-forge ipywidgets&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which will install all sorts of dependencies, including Jupyter notebooks&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:notebooks&#34;&gt;&lt;a href=&#34;#fn:notebooks&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. It supposedly enables the widgets too but you can run&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jupyter nbextension enable --py widgetsnbextension&lt;/code&gt; to make sure.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python -m ipykernel install --name py3 --user&lt;/code&gt; will then link the kernel to jupyter.&lt;/p&gt;

&lt;p&gt;Then &lt;code&gt;--name py3&lt;/code&gt; flag is optional and just assigns a name of your choosing to that kernel.
The version of python used for the kernel is whatever is returned when you ask bash &lt;code&gt;which python&lt;/code&gt; (so if you used source &lt;code&gt;activate&lt;/code&gt; earlier, it will be the version associated with the kernel whose name is in parentheses in your Terminal session).
&lt;strong&gt;The &lt;code&gt;--user&lt;/code&gt; flag is necessary.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;ipyparallel&#34;&gt;iPyParallel&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ipython/ipyparallel&#34; target=&#34;_blank&#34;&gt;https://github.com/ipython/ipyparallel&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;pip install ipyparallel&lt;/code&gt; to install.&lt;br /&gt;
&lt;code&gt;ipcluster nbextension enable&lt;/code&gt; (add the &lt;code&gt;--user&lt;/code&gt; flag as well if you encounter an error).
This one also seems to be necessary to get the clusters to show up:&lt;br /&gt;
&lt;code&gt;jupyter serverextension enable --sys-prefix --py ipyparallel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To install for all users (as root):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jupyter nbextension install --sys-prefix --py ipyparallel
jupyter nbextension enable --sys-prefix --py ipyparallel
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;kernels&#34;&gt;Kernels&lt;/h1&gt;

&lt;h2 id=&#34;introduction-1&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TODO: WRITE MORE ABOUT MULTI-KERNEL SUPPORT, provide an example.&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;To see all the kernels jupyter is aware of:
&lt;code&gt;jupyter kernelspec list&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;management&#34;&gt;Management&lt;/h2&gt;

&lt;p&gt;To remove kernels, use &lt;code&gt;jupyter kernelspec remove&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;jupyterhub&#34;&gt;JupyterHub&lt;/h1&gt;

&lt;h2 id=&#34;introduction-2&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;More information here about installation would be helpful, but we&amp;rsquo;ll be going through this in more detail at another time since JupyterHub will form the basis for the solutions we will use for our classroom environments.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;(for personal use)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jupyterhub.readthedocs.io/en/stable/getting-started/&#34; target=&#34;_blank&#34;&gt;Getting Started&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jupyter-notebook.readthedocs.io/en/latest/public_server.html&#34; target=&#34;_blank&#34;&gt;Running a notebook server&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;jupyterlab&#34;&gt;JupyterLab&lt;/h1&gt;

&lt;h2 id=&#34;introduction-3&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I love this environment but it is a little tricky to set up properly and get everything working as expected. Though once you do, I doubt you will want to use anything else.&lt;/p&gt;

&lt;h2 id=&#34;install-1&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;Once Jupyter Lab is installed, go ahead and run it the same way you would a notebook:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jupyter lab (--no-browser)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;widget-extensions&#34;&gt;Widget Extensions&lt;/h2&gt;

&lt;p&gt;By default (as of Dec 2018), it will be accessible through &lt;code&gt;localhost:8888&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Go ahead and launch an instance of Python and see if widgets work.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import ipywidgets as wd
wd.FloatSlider()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the output of the following is text instead of a widget, try running the following in the command-line (shutdown the server with &lt;code&gt;Ctrl-C&lt;/code&gt; twice, then&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jupyter labextension install @jupyter-widgets/jupyterlab-manager&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And relaunch JupyterLab (if you didn&amp;rsquo;t close your browswer window, a simple refresh will work to re-establish the connection and pick up where you left off), and try the example above again.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Something that came up once&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I saw my server output spitting out &lt;code&gt;TypeError: __init__() got an unexpected keyword argument &#39;io_loop&#39;&lt;/code&gt; over and over again when any kernel was started. Something was going on with the WebSocket I/O communication (whatever that means), but the following downgrade of the Python Web Framework worked to &lt;a href=&#34;https://stackoverflow.com/questions/48090119/jupyter-notebook-typeerror-init-got-an-unexpected-keyword-argument-io-l&#34; target=&#34;_blank&#34;&gt;fix it&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install tornado==4.5.3&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;sharing&#34;&gt;Sharing&lt;/h1&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TODO&lt;/code&gt; write about why this is useful&lt;/p&gt;

&lt;h2 id=&#34;exporting&#34;&gt;Exporting&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;conda env export &amp;gt; environment.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which you then load up with
&lt;code&gt;conda env create -f environment.yml&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;cloning&#34;&gt;Cloning&lt;/h2&gt;

&lt;p&gt;You can make an exact copy of an environment by creating a clone of it:&lt;br /&gt;
&lt;code&gt;conda create --name myclone --clone myenv&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To verify that the copy was made:&lt;br /&gt;
&lt;code&gt;conda info --envs&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:note&#34;&gt;Github Gists are actually surprisingly difficult to sort through, and navigating to this webpage will be much easier, anyway.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:note&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:notebooks&#34;&gt;It does appear though that &lt;code&gt;notebooks&lt;/code&gt; is pre-packaged now with Anaconda, so it will likely already be installed.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:notebooks&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Relevant Projects</title>
      <link>https://www.michaelpilosov.com/openscience/getting-started/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.michaelpilosov.com/openscience/getting-started/</guid>
      <description>

&lt;h1 id=&#34;basics&#34;&gt;Basics&lt;/h1&gt;

&lt;p&gt;In this documentation, we will research and likely leverage (most if not all of) the following open-source projects.
We will eventually address each in depth within this documentation and will update this section with relevant links as necessary.
For now, we provide a brief overview and summary of what we are looking into.&lt;/p&gt;

&lt;h2 id=&#34;widgets&#34;&gt;Widgets&lt;/h2&gt;

&lt;p&gt;If you have ever tried developing a graphical user interface (GUI) for your code, you&amp;rsquo;ll know how cumbersome it can be.
Thankfully, the &lt;a href=&#34;http://jupyter.org/widgets&#34; target=&#34;_blank&#34;&gt;Widgets&lt;/a&gt; package from Project Jupyter greatly simplifies linking your code to a large library of existing &amp;ldquo;widgets,&amp;rdquo; which do everything from giving you sliders to fully-interactive maps.&lt;/p&gt;

&lt;p&gt;I highly encourage you to see what is possible to embed in your notebooks (and webpages) by scrolling through their &lt;a href=&#34;http://jupyter.org/widgets&#34; target=&#34;_blank&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;jupyter-nbviewer&#34;&gt;Jupyter nbviewer&lt;/h2&gt;

&lt;p&gt;Paste a link to a notebook into &lt;a href=&#34;https://nbviewer.jupyter.org/&#34; target=&#34;_blank&#34;&gt;this form&lt;/a&gt; and this website will render the notebook for your reading pleasure.&lt;/p&gt;

&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;

&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;

&lt;h2 id=&#34;anaconda&#34;&gt;Anaconda&lt;/h2&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;binderhub&#34;&gt;BinderHub&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jupyterhub/binderhub&#34; target=&#34;_blank&#34;&gt;BinderHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;taken from the repository description&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;BinderHub allows you to &lt;code&gt;BUILD&lt;/code&gt; and &lt;code&gt;REGISTER&lt;/code&gt; a Docker image using a GitHub repository, then CONNECT with JupyterHub, allowing you to create a public IP address that allows users to interact with the code and environment within a live JupyterHub instance. You can select a specific branch name, commit, or tag to serve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;repo2docker&#34;&gt;Repo2Docker&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jupyter/repo2docker&#34; target=&#34;_blank&#34;&gt;repo2docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the title suggest, this package turns a github repository into a docker image that can be built.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;taken from the repository description&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;repo2docker fetches a git repository and builds a container image based on the configuration files found in the repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Binder leverages this to then serve the contents of the image in conjuction with JupyterHub.&lt;/p&gt;

&lt;h2 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h2&gt;

&lt;p&gt;Google is a provider. Links/info should go here to a couple other platforms, some basic information.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;jupyterhub&#34;&gt;JupyterHub&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jupyterhub/jupyterhub&#34; target=&#34;_blank&#34;&gt;JupyterHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;taken from the repository description&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With &lt;a href=&#34;https://jupyterhub.readthedocs.io&#34; target=&#34;_blank&#34;&gt;JupyterHub&lt;/a&gt; you can create a
&lt;strong&gt;multi-user Hub&lt;/strong&gt; which spawns, manages, and proxies multiple instances of the
single-user &lt;a href=&#34;https://jupyter-notebook.readthedocs.io&#34; target=&#34;_blank&#34;&gt;Jupyter notebook&lt;/a&gt;
server.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jupyter.org&#34; target=&#34;_blank&#34;&gt;Project Jupyter&lt;/a&gt; created JupyterHub to support many
users. The Hub can offer notebook servers to a class of students, a corporate
data science workgroup, a scientific research project, or a high performance
computing group.&lt;/p&gt;

&lt;h2 id=&#34;technical-overview&#34;&gt;Technical overview&lt;/h2&gt;

&lt;p&gt;Three main actors make up JupyterHub:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;multi-user &lt;strong&gt;Hub&lt;/strong&gt; (tornado process)&lt;/li&gt;
&lt;li&gt;configurable http &lt;strong&gt;proxy&lt;/strong&gt; (node-http-proxy)&lt;/li&gt;
&lt;li&gt;multiple &lt;strong&gt;single-user Jupyter notebook servers&lt;/strong&gt; (Python/Jupyter/tornado)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basic principles for operation are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hub launches a proxy.&lt;/li&gt;
&lt;li&gt;Proxy forwards all requests to Hub by default.&lt;/li&gt;
&lt;li&gt;Hub handles login, and spawns single-user servers on demand.&lt;/li&gt;
&lt;li&gt;Hub configures proxy to forward url prefixes to the single-user notebook
servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JupyterHub also provides a
&lt;a href=&#34;http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/jupyterhub/master/docs/rest-api.yml#/default&#34; target=&#34;_blank&#34;&gt;REST API&lt;/a&gt;
for administration of the Hub and its users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I personally run Jupyterhub on a remote server so that I always have access to a secure and familiar environment if I ever need to test out some code and find myself without my laptop.
By default, it accepts the login information of just the user who is running it, but we will see later how it can be configured for its intended use as a multi-user authentication hub.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 2</title>
      <link>https://www.michaelpilosov.com/changelog/day2/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 -0700</pubDate>
      
      <guid>https://www.michaelpilosov.com/changelog/day2/</guid>
      <description>

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;I spent the day working with the widget library and understanding how interpolating polynomials are handled by &lt;code&gt;scipy&lt;/code&gt;.
Most of today&amp;rsquo;s developments were concerned with my random art and animation libraries, and I completed some of the most important components of the interface: setting time-dependent functions (independent of frames), and creating a widget that properly reads/writes data to a dictionary.&lt;/p&gt;

&lt;p&gt;I still need to link the interfaces for the existing GUIs that write the properties.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow removal feature?&lt;/li&gt;
&lt;li&gt;scrape the widgets and write to dictionary.&lt;/li&gt;
&lt;li&gt;New GUI for stacking effects, connecting each effect to the needed time-series based on available entries in aforementioned dictionary.&lt;/li&gt;
&lt;li&gt;All effects get applied with their time series, passed to animation function to be written to file.&lt;/li&gt;
&lt;li&gt;Maybe use the Play button to preview? (Have a GUI focused on the &lt;code&gt;num_frames&lt;/code&gt; perspective). It is linked to the index.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;notes&#34;&gt;Notes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Still having trouble with the mybinder.org connections with my &lt;code&gt;giftplanning&lt;/code&gt; library that tests out my deployment solutions for interactive blogs.&lt;/li&gt;
&lt;li&gt;After conversing with Elliott last night, I think that writing a simple WebSocket atop Flask with his help may be a good solution. A JSON file gets passed back and forth, manipulations happen on a server. Still would prefer to just learn how to make the widgets do this part.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
